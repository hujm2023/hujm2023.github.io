<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Redis源码 on hujm2023&#39;s blog</title>
    <link>http://localhost:1313/tags/redis%E6%BA%90%E7%A0%81/</link>
    <description>Recent content in Redis源码 on hujm2023&#39;s blog</description>
    <generator>Hugo -- 0.151.0</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 08 Apr 2021 22:31:17 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/redis%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis(二): 什么是 Redis 中的事件</title>
      <link>http://localhost:1313/posts/redis%E4%BA%8C-%E4%BB%80%E4%B9%88%E6%98%AF-redis-%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Thu, 08 Apr 2021 22:31:17 +0800</pubDate>
      <guid>http://localhost:1313/posts/redis%E4%BA%8C-%E4%BB%80%E4%B9%88%E6%98%AF-redis-%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://redisbook.readthedocs.io/en/latest/internal/ae.html&#34;&gt;Redis 设计与实现&amp;ndash;事件&lt;/a&gt; 中有很清晰的说明。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;redis 要处理的事件有两种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件事件：网络连接套接字。服务器与多个客户端通过网络套接字连接，当对应套接字上出现“读”或“写”需求时，对应的事件就会触发；&lt;/li&gt;
&lt;li&gt;时间事件：在指定时间点运行的事件。如持续运行的服务器为了维持一个健康稳定的状态，需要定期对自身的资源和状态进行检查和整理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一时间事件&#34;&gt;一、时间事件&lt;/h3&gt;
&lt;p&gt;时间事件记录着那些要在指定时间点运行的事件， 多个时间事件以无序链表的形式保存在服务器状态中。&lt;br /&gt;
每个时间事件主要由三个属性组成：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis系列(一): Redis 单线程事件循环</title>
      <link>http://localhost:1313/posts/redis%E4%B8%80-redis-%E5%8D%95%E7%BA%BF%E7%A8%8B%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Mon, 05 Apr 2021 23:08:37 +0800</pubDate>
      <guid>http://localhost:1313/posts/redis%E4%B8%80-redis-%E5%8D%95%E7%BA%BF%E7%A8%8B%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</guid>
      <description>&lt;h2 id=&#34;一前言&#34;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;在关注 &lt;strong&gt;redis 单线程/多线程&lt;/strong&gt; 时，有几个重要的时间节点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Before &lt;code&gt;Redis v4.0&lt;/code&gt;，真正的单线程；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Redis v4.0&lt;/code&gt;，引入多线程处理 &lt;code&gt;AOF&lt;/code&gt; 等任务，但&lt;strong&gt;核心的网络模型中依旧使用单线程&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Redis v6.0&lt;/code&gt;，正式在网络模型中实现 &lt;code&gt;I/O多线程&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从 &lt;code&gt;Redis v1.0&lt;/code&gt; 到 &lt;code&gt;Redis v6.0以前&lt;/code&gt;，Redis 的核心网络模型一直都是一个典型的 &lt;strong&gt;单Reactor模型&lt;/strong&gt;，所有的事件都在这个线程内处理完成。本 issue 旨在解释清楚这个 &lt;strong&gt;单Reactor模型&lt;/strong&gt; 的所有运作细节，为以后更好地理解新的 &lt;strong&gt;Multi-Reactors/Master-Workers&lt;/strong&gt; 模型做准备。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
